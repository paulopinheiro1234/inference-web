<!-- CVS: $Id: build.xml,v 1.139 2007/11/26
12:21:33 andy_seaborne Exp $ -->

<project name="jena" default="main" basedir=".">

  <!-- Configuration properties -->
  <!-- ======================== -->

  <property name="Name"            value="Jena"/>
  <property name="name"            value="jena"/>

  <!-- Release version labels -->
  <property name="version-major"   value="2"/>
  <property name="version-minor"   value="5.6"/>
  <!-- e.g. -beta1, or empty string for stable releases -->
  <property name="version-status"  value=""/>

  <property name="version"         value="${version-major}.${version-minor}${version-status}"/>

  <!-- Output file names and locations -->
  <property name="dist.name"       value="${Name}-${version}"/>
  <property name="dist.zip.name"   value="${Name}-${version}.zip"/>
  <property name="web.site"        value="http://jena.sourceforge.net/" />
  <property name="jarfile"         value="${name}.jar"/>
  <property name="arq.jarfile"     value="arq.jar"/>
  <property name="testjarfile"     value="${name}test.jar"/>
  <property name="srczipfile"      value="${name}-src.zip"/>

  <!-- Source code locations -->
  <property name="src.dir"           value="src"/>
  <property name="src.examples.dir"  value="src-examples"/>
  <property name="bldsrc.dir"        value="bldsrc"/>
  <property name="classes.dir"       value="bldbin"/>
  <property name="dist.root"         value="dist"/>
  <property name="dist.dir"          value="${dist.root}/${dist.name}"/>
  <property name="lib.dir"           value="lib"/>
  <property name="doc.dir"           value="doc"/>
  <property name="doc.examples.dir"  value="${dist.dir}/${doc.dir}/src-examples" />
  <property name="contrib.dir"       value="${doc.dir}/contrib"/>
  <property name="vocab.dir"         value="vocabularies"/>
  <property name="javadoc.dir"       value="doc/javadoc"/>
  <property name="etc.dir"           value="etc"/>
  <property name="test.dir"          value="testing"/>
  <property name="tools.lib.dir"     value="tools-lib"/>

  <property name="bin.dir"           value="bin"/>
  <property name="bat.dir"           value="bat"/>

  <!-- Vocabulary generation -->
  <property name="vocab.java"        value="src/com/hp/hpl/jena/vocabulary" />
  <property name="vocab.tool"        value="jena.schemagen" />
  <property name="vocab.template"    value="vocabularies/jenavocab.rdf" />

  <!-- Classpaths -->
  <path id="classpath">
    <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
  </path>

  <path id="classpath.tools">
    <fileset dir="${lib.dir}" includes="*.jar"/>
    <fileset dir="${tools.lib.dir}" includes="*.jar"/>
  </path>

  <!-- keyword substitutions -->
  <filterset id="filters.shared">
    <filter token="Name"          value="${Name}" />
    <filter token="website"       value="${web.site}" />
    <filter token="version-major" value="${version-major}" />
    <filter token="version-minor" value="${version-minor}" />
    <filter token="version-status" value="${version-status}" />
    <filter token="version"       value="${version}" />
  </filterset>

  <!-- Primary externally visible targets -->
  <!-- ================================== -->

  <target name="main" depends="compile-jena,make-jar"
    description="Copy and compile source code, then build ${jarfile}"/>

  <target name="jar" depends="main"
    description="Alias for target 'main'; builds ${jarfile}"/>

  <target name="jar-optimised"  depends="optimise-javac-flags,main"
    description="Builds ${jarfile} with javac optimisation turned on and no debug info"/>

  <target name="release" depends="check-contrib,check-assembler-doc,package"
      description="Create a complete Jena release"/>

  <target name="check-contrib" unless="update.unnecessary">
    <echo>
        Warning: contrib needs updating: do `ant contrib`
        and commit updates before releasing.
    </echo>
  </target>

  <target name="check-assembler-doc" unless="assembler.unnecessary">
    <echo>
        Warning: assembler documentation needs updating: do `ant assembler-doc`
        and commit updates before releasing.
    </echo>
  </target>

  <target name="jar-etc" depends="test-uptodate-etc" unless="etc.build.notreq"
    description="Constructs a .jar file containing only the files from Jena's etc directory">
      <jar destfile="${lib.dir}/etc.jar" basedir="." includes="${etc.dir}/**, ${vocab.dir}/**"></jar>
  </target>

  <target name="test" depends="test-jar"
    description="Runs the unit tests against ${jarfile}"/>

  <!-- Source code preparation targets -->
  <!-- =============================== -->

  <target name="clean-classes"
    description="Remove all contents from ${classes.dir} to ensure a clean build">
    <delete dir="${classes.dir}"/>
    <mkdir dir="${classes.dir}"/>
  </target>

  <target name="copy-src-tree"
    description="Create a copy of the source tree in the build directory, and apply source code filters">
    <delete dir="${bldsrc.dir}"/>
    <mkdir  dir="${bldsrc.dir}"/>
    <tstamp>
      <format property="BUILD_TIME" pattern="d-MMMM-yyyy HH:mm"/>
    </tstamp>
    <copy todir="${bldsrc.dir}" >
      <fileset dir="${src.dir}" excludes="**/CVS"/>
      <filterset>
        <filterset refid="filters.shared" />
        <filter token="build-time" value="${BUILD_TIME}" />
      </filterset>
    </copy>
  </target>

  <target name="copy-aux-files"
    description="Copy auxilliary files (e.g. ./etc) into the classes dir so that they will be included in jena.jar" >
    <copy todir="${classes.dir}/${etc.dir}">
      <fileset dir="${etc.dir}" includes="**" excludes="**/CVS"/>
    </copy>
    <copy todir="${classes.dir}/${vocab.dir}">
      <fileset dir="${vocab.dir}" includes="**" excludes="**/CVS"/>
    </copy>
  </target>

  <!-- Primary Java build targets -->
  <!-- ========================== -->

  <target name="compile-jena" depends="clean-classes,copy-src-tree,default-javac-flags"
    description="Compile the copied Jena source tree into class files under ${classes.dir}">
    <javac
       srcdir="${bldsrc.dir}"
       destdir="${classes.dir}"
       debug="${java.debug}"
       debuglevel="${java.debuglevel}"
       deprecation="${java.deprecation}"
       optimize="${java.optimize}"
       source="${java.source}"
       target="${java.target}">
      <classpath refid="classpath" />
    </javac>
    <copy todir="${classes.dir}" file="${bldsrc.dir}/log4j.properties"/>
  </target>

  <target name="make-jar" depends="compile-jena,copy-aux-files"
    description="Create jena.jar and jenatest.jar files from the contents of the classes dir">
    <property name="pattern.tests" value="**/test/*"/>
    <jar jarfile="${lib.dir}/${jarfile}" index="yes">
      <fileset dir="${classes.dir}" excludes="${pattern.tests}"/>
    </jar>
    <jar jarfile="${lib.dir}/${testjarfile}" index="yes">
      <fileset dir="${classes.dir}" includes="${pattern.tests}"/>
    </jar>
    <!-- finally, check that etc.jar is up-to-date if it exists -->
    <antcall target="conditional-jar-etc" />
  </target>

  <target name="optimise-javac-flags"
    description="Set the javac flags that will produce an optmised jar with no debug symbols" >
    <property name="java.debug"       value="false"/>
    <property name="java.debuglevel"  value=""/>
    <property name="java.deprecation" value="false"/>
    <property name="java.optimize"    value="true"/>
    <property name="java.source"      value="1.4"/>
    <property name="java.target"      value="1.4"/>
  </target>

  <target name="default-javac-flags"
    description="Set the javac flags that will produce an debug jar with no compiler optimisation and all debug symbols" >
    <!-- Note that in ant, if these flags are already set setting them again has no effect -->
    <property name="java.debug"       value="true"/>
    <property name="java.debuglevel"  value="source,lines,vars"/>
    <property name="java.deprecation" value="false"/>
    <property name="java.optimize"    value="false"/>
    <property name="java.source"      value="1.4"/>
    <property name="java.target"      value="1.4"/>
  </target>

  <!-- handling etc.jar -->
  <!-- ================ -->
  <!-- etc.jar is a handy .jar packaging of the contents of the etc directory -->

  <target name="test-uptodate-etc"
          description="set the property etc.build.notreq if lib/etc.jar is newer than ./etc/*">
    <uptodate property="etc.build.notreq" targetfile="${lib.dir}/etc.jar">
      <srcfiles dir="." includes="${etc.dir}/**, ${vocab.dir}/**" />
    </uptodate>
  </target>

  <target name="test-exists-etc"
  		  description="set the property etc.file.exists if lib/etc.jar exists">
    <available file="${lib.dir}/etc.jar" property="etc.file.exists" />
  </target>

  <target name="conditional-jar-etc" depends="test-exists-etc" if="etc.file.exists"
    	  description="Only build etc.jar if it already exists in ./lib and is out-of-date">
    <antcall target="jar-etc" />
  </target>

  <!-- handling contrib and assembler -->
  <!-- ============================== -->

  <uptodate property="update.unnecessary"
    srcfile="${contrib.dir}/contributions.n3" targetfile="${contrib.dir}/contributions.html"
  />

  <uptodate property="assembler.unnecessary"
    srcfile="${doc.dir}/assembler/assembler-howto.phtml"
    targetfile="${doc.dir}/assembler/assembler-howto.html"
  />

  <target name="contrib" unless="update.unnecessary">
      <echo>rebuilding contributions.html from contributions.n3</echo>
      <java classname="com.hp.hpl.jena.tools.html.RDFtoTable">
          <arg value="${contrib.dir}/contributions-table.n3"/>
          <arg value="${contrib.dir}/contributions.n3"/>
          <redirector output="${contrib.dir}/table.tmp"/>
          <classpath>
              <path refid="classpath.tools"/>
          </classpath>
      </java>
      <java classname="jena.Weave">
          <arg value="${contrib.dir}/contrib-template.html"/>
          <redirector
              output="${contrib.dir}/contributions.html"
          />
          <sysproperty
              key="table"
              value="${contrib.dir}/table.tmp"
          />
          <classpath>
              <path refid="classpath.tools"/>
          </classpath>
      </java>
  </target>



  <!-- Generating Javadoc -->
  <!-- ================== -->

  <target name="clean-javadoc"
   description="Clean out the old javadoc dir prior to regenerating new javadoc files">
    <delete dir="${javadoc.dir}" quiet="true"/>
    <mkdir dir="${javadoc.dir}"/>
  </target>

  <target name="javadoc" depends="copy-src-tree,clean-javadoc"
    description="Generate selected javadoc (i.e. just the user-facing packages) from the copied source tree">
    <javadoc
     sourcepath="${bldsrc.dir}"
     destdir="${javadoc.dir}"
     source="${java.source}"
     author="true"
     version="true"
     classpathref="classpath"
     windowtitle="${Name} Framework"
     doctitle="${Name} Framework"
     Public="true"
     Use="true"
     bottom="Copyright &#169; 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Hewlett-Packard Development Company, LP"
     additionalparam="-breakiterator"
    >
      <classpath refid="classpath"/>
      <package name="com.hp.hpl.jena.assembler"/>
      <package name="com.hp.hpl.jena.db"/>
      <package name="com.hp.hpl.jena.rdf.model"/>
      <package name="com.hp.hpl.jena.rdf.listeners"/>
      <package name="com.hp.hpl.jena.rdf.arp"/>
      <package name="com.hp.hpl.jena.rdf.arp.lang"/>
      <package name="com.hp.hpl.jena.rdql"/>
      <package name="com.hp.hpl.jena.vocabulary"/>
      <package name="com.hp.hpl.jena.xmloutput"/>
      <package name="com.hp.hpl.jena.ontology"/>
      <package name="com.hp.hpl.jena.ontology.daml"/>
      <package name="com.hp.hpl.jena.enhanced"/>
      <package name="com.hp.hpl.jena.graph"/>
      <package name="com.hp.hpl.jena.graph.compose"/>
      <package name="com.hp.hpl.jena.graph.query"/>
      <package name="com.hp.hpl.jena.reasoner.rulesys"/>
      <package name="com.hp.hpl.jena.reasoner.rulesys.builtins"/>
      <package name="com.hp.hpl.jena.reasoner.transitiveReasoner"/>
      <package name="com.hp.hpl.jena.reasoner.dig"/>
      <package name="com.hp.hpl.jena.reasoner"/>
      <package name="com.hp.hpl.jena.shared"/>
      <package name="com.hp.hpl.jena.datatypes"/>
      <package name="com.hp.hpl.jena.datatypes.xsd"/>
      <package name="com.hp.hpl.jena.util"/>
      <package name="com.hp.hpl.jena.util.iterator"/>
      <package name="jena"/>
      <!-- We group the Javadoc packages by section -->
      <group title="API - Application Programming Interface">
        <package name="com.hp.hpl.jena.db"/>
        <package name="com.hp.hpl.jena.rdf.model"/>
        <package name="com.hp.hpl.jena.rdf.listeners"/>
        <package name="com.hp.hpl.jena.rdf.arp"/>
        <package name="com.hp.hpl.jena.rdf.arp.lang"/>
        <package name="com.hp.hpl.jena.datatypes"/>
        <package name="com.hp.hpl.jena.datatypes.xsd"/>
        <package name="com.hp.hpl.jena.rdql"/>
        <package name="com.hp.hpl.jena.shared"/>
        <package name="com.hp.hpl.jena.vocabulary"/>
        <package name="com.hp.hpl.jena.xmloutput"/>
        <package name="com.hp.hpl.jena.ontology"/>
        <package name="com.hp.hpl.jena.ontology.daml"/>
        <package name="com.hp.hpl.jena.reasoner"/>
        <package name="com.hp.hpl.jena.reasoner.rulesys"/>
        <package name="com.hp.hpl.jena.reasoner.rulesys.builtins"/>
        <package name="com.hp.hpl.jena.reasoner.transitiveReasoner"/>
        <package name="com.hp.hpl.jena.reasoner.dig"/>
      </group>
      <group title="SPI - System Programming Interface">
        <package name="com.hp.hpl.jena.enhanced"/>
        <package name="com.hp.hpl.jena.graph"/>
        <package name="com.hp.hpl.jena.graph.compose"/>
        <package name="com.hp.hpl.jena.graph.query"/>
        <package name="com.hp.hpl.jena.util"/>
        <package name="com.hp.hpl.jena.util.iterator"/>
      </group>
      <group title="Command line tools">
        <package name="jena" />
      </group>
    </javadoc>
  </target>

  <target name="javadoc-all" depends="copy-src-tree,clean-javadoc"
    description="Generate Javadoc for the whole of Jena, not just the user-facing packages">
    <javadoc
     sourcepath="${bldsrc.dir}"
     destdir="${javadoc.dir}"
     maxmemory="200m"
     author="true"
     version="true"
     classpathref="classpath"
     windowtitle="${Name} Framework"
     doctitle="${Name} Framework"
     overview="${bldsrc.dir}/link2readme.html"
     bottom="Copyright &#169; 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Hewlett-Packard. All Rights Reserved."
     packagenames="com.hp.hpl.*"
     additionalparam="-breakiterator"
     Use="true"
     />
  </target>

  <target name="assembler-doc" depends="assembler-doc-howto,assembler-doc-inside"/>

  <target name="assembler-doc-howto">
      <java classname="jena.Weave">
          <classpath>
              <path refid="classpath.tools"/>
          </classpath>
          <redirector
              output="doc/assembler/assembler-howto.html"
          />
          <arg value="doc/assembler/assembler-howto.phtml"/>
          <sysproperty key="vocab" value="vocabularies/assembler.n3"/>
          <sysproperty key="examples" value="doc/assembler/examples.n3"/>
      </java>
  </target>

   <target name="assembler-doc-inside">
        <java classname="jena.Weave">
            <classpath>
                <path refid="classpath.tools"/>
             </classpath>
             <redirector
                 output="doc/assembler/inside-assemblers.html"
             />
             <arg value="doc/assembler/inside-assemblers.phtml"/>
             <sysproperty key="vocab" value="vocabularies/assembler.n3"/>
             <sysproperty key="examples" value="doc/assembler/examples.n3"/>
         </java>
     </target>

  <!-- Creating a Jena distribution -->
  <!-- ============================ -->

  <target name="package" depends="copy-dist,zip-dist"
      description="Aggregate task to perform the steps of creating a Jena distribution"/>

  <target name="clean-dist"
    description="Clean the distribution directory prior to creating the distro">
    <delete dir="${dist.dir}" quiet="true"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="copy-dist" depends="make-jar,javadoc,clean-dist"
    description="Copy the various elements of a distribution into one directory tree">
    <!-- Libraries, including jena.jar" -->
    <copy todir="${dist.dir}/${lib.dir}">
      <fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/etc.jar" />
      <fileset dir="${lib.dir}" includes="readme.html"/>
    </copy>
    <!-- Source - we could zip this up -->
    <copy todir="${dist.dir}/${src.dir}">
      <fileset dir="${bldsrc.dir}" includes="**"/>
    </copy>
    <copy todir="${dist.dir}/${src.examples.dir}">
      <fileset dir="${src.examples.dir}" includes="**"/>
    </copy>
    <!-- Misc files -->
    <copy todir="${dist.dir}" file="build.xml"/>
    <copy todir="${dist.dir}" file="copyright.txt"/>
    <copy todir="${dist.dir}" file="INSTALL.txt"/>
    <copy todir="${dist.dir}" file="README.txt"/>
    <copy todir="${dist.dir}" file="ReleaseNotes.txt"/>
    <copy todir="${dist.dir}" file="test.bat"/>
    <copy todir="${dist.dir}" file="test.sh"/>
    <copy todir="${dist.dir}" file="test-db.sh"/>
    <copy todir="${dist.dir}" file="test-dig.sh"/>
    <copy todir="${dist.dir}" file="readme.html"/>
    <copy todir="${dist.dir}/${etc.dir}">
      <fileset dir="${etc.dir}" includes="**"/>
    </copy>
    <!-- Scripts -->
    <copy todir="${dist.dir}/${bin.dir}">
      <fileset dir="${bin.dir}" includes="**"/>
    </copy>
    <copy todir="${dist.dir}/${bat.dir}">
      <fileset dir="${bat.dir}" includes="**"/>
    </copy>

    <!-- Documentation -->
    <!-- Javadoc is part of the documentation directory -->

    <!-- First we translate the src-examples code into html (use ant-call to get the sequencing right) -->
    <antcall target="generate.html.src-examples">
    </antcall>

    <!-- copy the documentation tree, minus non-release files -->
    <copy todir="${dist.dir}/${doc.dir}">
      <fileset dir="${doc.dir}">
        <include name="**"/>
        <!-- Ignore the raw source and scripts we use to prepare the docs -->
        <exclude name="**/*.content.html"/>
        <exclude name="template.html"/>
        <exclude name="produce"/>
        <exclude name="merge"/>
        <exclude name="linkcheck"/>
        <exclude name="release"/>
        <exclude name="readme-site.txt"/>
        <!-- FrontPage control files -->
        <exclude name="**/_*"/>
        <exclude name="**/_*/*"/>
        <exclude name="**/desktop.ini"/>
      </fileset>
    </copy>

    <!-- After we copy, edit links to src-examples to point to the html versions instead -->
    <replaceregexp match="\.\./src-examples/(.*\.java)"
                   replace="src-examples/\1.xhtml"
                   byline="true">
      <fileset dir="${dist.dir}/${doc.dir}" includes="**/*.html" excludes="**/javadoc"/>
    </replaceregexp>
    <replaceregexp match="\.\./src-examples/data"
                   replace="src-examples/data"
                   byline="true">
      <fileset dir="${dist.dir}/${doc.dir}" includes="**/*.html" excludes="**/javadoc"/>
    </replaceregexp>
    <replaceregexp match="\.\./vocabularies"
                   replace="vocabularies"
                   byline="true">
      <fileset dir="${dist.dir}/${doc.dir}" includes="**/*.html" excludes="**/javadoc"/>
    </replaceregexp>

    <!-- Vocabularies and schemas -->
    <copy todir="${dist.dir}/${vocab.dir}">
      <fileset dir="${vocab.dir}" includes="**"/>
    </copy>
    <copy todir="${dist.dir}/${test.dir}">
      <!-- Exclude any zips of the RDQL test scripts -->
      <fileset dir="${test.dir}"
               includes="**"
               excludes="${test.dir}/RDQL/rdql-tests-jena*.zip"/>
    </copy>
    <!-- Junk that creeps in -->
    <delete>
      <fileset dir="${dist.dir}" includes="**/.nbattrs"/>
    </delete>
  </target>

  <target name="zip-dist"
    description="Create a zip file of everything in the distribution directory">
    <zip zipfile="${dist.root}/${dist.zip.name}">
      <fileset dir="dist" includes="${dist.name}/**"/>
    </zip>
  </target>

  <!-- Unit testing -->
  <!-- ============ -->

  <target name="test-jar"
    description="Run the unit tests using ${jarfile}; see target 'test-dev' to run unit tests on compiled classes">
    <echo>Unit tests running against ${jarfile}</echo>
    <junit fork="yes" printsummary="yes">
      <classpath>
        <fileset dir="${lib.dir}" includes="*.jar"/>
      </classpath>
      <test name="com.hp.hpl.jena.test.TestPackage"/>
    </junit>
  </target>

  <target name="test-dev" depends="compile-jena"
    description="Run the unit tests using the contents of ${classes.dir}; see target 'test-jar' to run unit tests on jena.jar">
    <echo>Unit tests running against classes in ${classes.dir}</echo>
    <junit fork="yes" printsummary="yes">
      <classpath>
        <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
        <pathelement location="${classes.dir}"/>
      </classpath>
      <test name="com.hp.hpl.jena.test.TestPackage"/>
    </junit>
  </target>


  <!-- Using schemagen to produce vocabularies -->
  <!-- ======================================= -->

  <target name="vocabs" depends="ont-events, owl-vocab, ontdoc-vocab"
    description="Target to generate schemagen classes for vocabulary schemas that have been updated"/>

  <target name="check.ont-events">
    <uptodate property="ont-events.build.notreq"
          srcFile="${vocab.dir}/ont-event.rdf"
          targetFile="${vocab.java}/OntEventsVocab.java" />
  </target>

  <target name="ont-events" depends="check.ont-events" unless="ont-events.build.notreq">
    <java classname="${vocab.tool}" classpathref="classpath.tools" fork="yes">
      <arg value="-i" />
      <arg value="file:${vocab.dir}/ont-event.rdf" />
      <arg value="-c" />
      <arg value="${vocab.template}" />
      <arg value="-n" />
      <arg value="OntEventsVocab" />
      <arg value="--ontology" />
    </java>
  </target>

  <target name="check.owl-vocab">
    <uptodate property="owl-vocab.build.notreq"
          srcFile="${vocab.dir}/owl.owl"
          targetFile="${vocab.java}/OWL.java" />
  </target>

  <target name="owl-vocab" depends="check.owl-vocab" unless="owl-vocab.build.notreq">
    <java classname="${vocab.tool}" classpathref="classpath.tools" fork="yes">
      <arg value="-i" />
      <arg value="file:${vocab.dir}/owl.owl" />
      <arg value="-c" />
      <arg value="${vocab.template}" />
      <arg value="-n" />
      <arg value="OWL" />
    </java>
  </target>

  <target name="check.ontdoc-vocab">
    <uptodate property="ontdoc-vocab.build.notreq"
          srcFile="${vocab.dir}/ont-manager.rdf"
          targetFile="${vocab.java}/OntDocManagerVocab.java" />
  </target>

  <target name="ontdoc-vocab" depends="check.ontdoc-vocab" unless="ontdoc-vocab.build.notreq">
    <java classname="${vocab.tool}" classpathref="classpath.tools" fork="yes">
      <arg value="-i" />
      <arg value="file:${vocab.dir}/ont-manager.rdf" />
      <arg value="-c" />
      <arg value="${vocab.template}" />
      <arg value="-n" />
      <arg value="OntDocManagerVocab" />
    </java>
  </target>

  <!-- Generate html version of src-examples -->
  <target name="generate.html.src-examples" description="Generate HTML form of the code in src-examples">
	  <taskdef name="java2html"
	      classname="de.java2html.anttasks.Java2HtmlTask"
	      classpathref="classpath.tools"
	  />
      <!-- default location to write to, unless already given -->
      <java2html
             srcdir="${src.examples.dir}"
             destdir="${dist.dir}/${doc.dir}/${src.examples.dir}"
             includes="**/*.java"
             excludes="**/CVS"
             style="eclipse"
             showLineNumbers="true"
             showFileName="true"
             showTableBorder="true"
             outputFormat="xhtml11"
      />
      <!-- we also copy the supporting code, sample data and vocabularies -->
      <copy todir="${dist.dir}/${doc.dir}/${src.examples.dir}">
        <fileset dir="${src.examples.dir}" includes="**/*" />
      </copy>
      <copy todir="${dist.dir}/${doc.dir}/${vocab.dir}">
        <fileset dir="${vocab.dir}" includes="**/*" />
      </copy>
  </target>
</project>
