<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<style type="text/css">
td.java, td.java-ln {vertical-align:top;}
tt.java, tt.java-ln, pre.java, pre.java-ln {line-height:1em; margin-bottom:0em;}
td.java-ln { text-align:right; }
tt.java-ln, pre.java-ln { color:#888888 }
/* Background       */ span.java0  { font-size: 10pt; color:#ffffff; }
/* Line numbers       */ span.java1  { font-size: 10pt; color:#808080; }
/* Multi-line comments       */ span.java2  { font-size: 10pt; color:#3f7f5f; }
/* Single-line comments       */ span.java3  { font-size: 10pt; color:#3f7f5f; }
/* Keywords       */ span.java4  { font-size: 10pt; color:#7f0055; font-weight:bold; }
/* Strings       */ span.java5  { font-size: 10pt; color:#2a00ff; }
/* Character constants       */ span.java6  { font-size: 10pt; color:#990000; }
/* Numeric constants       */ span.java7  { font-size: 10pt; color:#990000; }
/* Parenthesis       */ span.java8  { font-size: 10pt; color:#000000; }
/* Primitive Types       */ span.java9  { font-size: 10pt; color:#7f0055; font-weight:bold; }
/* Others       */ span.java10  { font-size: 10pt; color:#000000; }
/* Javadoc keywords       */ span.java11  { font-size: 10pt; color:#7f9fbf; }
/* Javadoc HTML tags       */ span.java12  { font-size: 10pt; color:#7f7f9f; }
/* Javadoc links       */ span.java13  { font-size: 10pt; color:#3f3fbf; }
/* Javadoc others       */ span.java14  { font-size: 10pt; color:#3f5fbf; }
/* Undefined       */ span.java15  { font-size: 10pt; color:#ff6100; }
/* Annotation       */ span.java16  { font-size: 10pt; color:#646464; }
</style>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
<title></title>
</head>
<body>
<div class="java"><code class="java"><span class="java14">/*****************************************************************************<br />
 * Source code information<br />
 * -----------------------<br />
 * Original author&#xA0;&#xA0;&#xA0; Ian Dickinson, HP Labs Bristol<br />
 * Author email&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ian.dickinson@hp.com<br />
 * Package&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Jena 2<br />
 * Web&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; http://sourceforge.net/projects/jena/<br />
 * Created&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 25-Jul-2003<br />
 * Filename&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; $RCSfile: PersistentOntology.java,v $<br />
 * Revision&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; $Revision: 1.1 $<br />
 * Release status&#xA0;&#xA0;&#xA0;&#xA0; $State: Exp $<br />
 *<br />
 * Last modified on&#xA0;&#xA0; $Date: 2005/10/06 17:49:07 $<br />
 *&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; by&#xA0;&#xA0; $Author: andy_seaborne $<br />
 *<br />
 * (c) Copyright 2002, 2003, 2004, 2005 Hewlett-Packard Development Company, LP<br />
 * (see footer for full conditions)<br />
 *****************************************************************************/<br />
<br />
</span><span class="java3">// Package<br />
///////////////<br />
</span><span class="java4">package </span><span class="java10">jena.examples.ontology.persistentOntology;<br />
<br />
<br />
</span><span class="java3">// Imports<br />
///////////////<br />
</span><span class="java4">import </span><span class="java10">java.util.*;<br />
<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.db.*;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.ontology.*;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.rdf.model.*;<br />
<br />
<br />
</span><span class="java14">/**<br />
 * </span><span class="java12">&lt;p&gt;<br />
 </span><span class="java14">* Simple example of using the persistent db layer with ontology models.&#xA0; Assumes<br />
 * that a PostgreSQL database called 'jenatest' has been set up, for a user named ijd.<br />
 * </span><span class="java12">&lt;/p&gt;<br />
 </span><span class="java14">*<br />
 * </span><span class="java11">@author </span><span class="java14">Ian Dickinson, HP Labs<br />
 *&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; (&lt;a&#xA0; href=&#34;mailto:Ian.Dickinson@hp.com&#34; &gt;email</span><span class="java12">&lt;/a&gt;</span><span class="java14">)<br />
 * </span><span class="java11">@version </span><span class="java14">CVS $Id: PersistentOntology.java,v 1.1 2005/10/06 17:49:07 andy_seaborne Exp $<br />
 */<br />
</span><span class="java4">public class </span><span class="java10">PersistentOntology </span><span class="java8">{<br />
&#xA0;&#xA0;&#xA0; </span><span class="java3">// Constants<br />
&#xA0;&#xA0;&#xA0; //////////////////////////////////<br />
<br />
<br />
&#xA0;&#xA0;&#xA0; // Static variables<br />
&#xA0;&#xA0;&#xA0; //////////////////////////////////<br />
<br />
&#xA0;&#xA0;&#xA0; // Instance variables<br />
&#xA0;&#xA0;&#xA0; //////////////////////////////////<br />
<br />
&#xA0;&#xA0;&#xA0; // Constructors<br />
&#xA0;&#xA0;&#xA0; //////////////////////////////////<br />
<br />
&#xA0;&#xA0;&#xA0; // External signature methods<br />
&#xA0;&#xA0;&#xA0; //////////////////////////////////<br />
<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">loadDB</span><span class="java8">( </span><span class="java10">ModelMaker maker, String source </span><span class="java8">) {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// use the model maker to get the base model as a persistent model<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // strict=false, so we get an existing model by that name if it exists<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // or create a new one<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Model base = maker.createModel</span><span class="java8">( </span><span class="java10">source, </span><span class="java4">false </span><span class="java8">)</span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// now we plug that base model into an ontology model that also uses<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // the given model maker to create storage for imported models<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">OntModel m = ModelFactory.createOntologyModel</span><span class="java8">( </span><span class="java10">getModelSpec</span><span class="java8">( </span><span class="java10">maker </span><span class="java8">)</span><span class="java10">, base </span><span class="java8">)</span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// now load the source document, which will also load any imports<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">m.read</span><span class="java8">( </span><span class="java10">source </span><span class="java8">)</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">listClasses</span><span class="java8">( </span><span class="java10">ModelMaker maker, String modelID </span><span class="java8">) {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// use the model maker to get the base model as a persistent model<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // strict=false, so we get an existing model by that name if it exists<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // or create a new one<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Model base = maker.createModel</span><span class="java8">( </span><span class="java10">modelID, </span><span class="java4">false </span><span class="java8">)</span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// create an ontology model using the persistent model as base<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">OntModel m = ModelFactory.createOntologyModel</span><span class="java8">( </span><span class="java10">getModelSpec</span><span class="java8">( </span><span class="java10">maker </span><span class="java8">)</span><span class="java10">, base </span><span class="java8">)</span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">for </span><span class="java8">(</span><span class="java10">Iterator i = m.listClasses</span><span class="java8">()</span><span class="java10">; i.hasNext</span><span class="java8">()</span><span class="java10">; </span><span class="java8">) {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">OntClass c = </span><span class="java8">(</span><span class="java10">OntClass</span><span class="java8">) </span><span class="java10">i.next</span><span class="java8">()</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; System.out.println</span><span class="java8">( </span><span class="java5">&#34;Class &#34; </span><span class="java10">+ c.getURI</span><span class="java8">() )</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0; }<br />
<br />
<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java10">ModelMaker getRDBMaker</span><span class="java8">( </span><span class="java10">String dbURL, String dbUser, String dbPw, String dbType, </span><span class="java9">boolean </span><span class="java10">cleanDB </span><span class="java8">) {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">try </span><span class="java8">{<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Create database connection<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">IDBConnection conn&#xA0; = </span><span class="java4">new </span><span class="java10">DBConnection</span><span class="java8">( </span><span class="java10">dbURL, dbUser, dbPw, dbType </span><span class="java8">)</span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// do we need to clean the database?<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">if </span><span class="java8">(</span><span class="java10">cleanDB</span><span class="java8">) {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">conn.cleanDB</span><span class="java8">()</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Create a model maker object<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">ModelFactory.createModelRDBMaker</span><span class="java8">( </span><span class="java10">conn </span><span class="java8">)</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">catch </span><span class="java8">(</span><span class="java10">Exception e</span><span class="java8">) {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">e.printStackTrace</span><span class="java8">()</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; System.exit</span><span class="java8">( </span><span class="java7">1 </span><span class="java8">)</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return null</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java10">OntModelSpec getModelSpec</span><span class="java8">( </span><span class="java10">ModelMaker maker </span><span class="java8">) {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// create a spec for the new ont model that will use no inference over models<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // made by the given maker (which is where we get the persistent models from)<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">OntModelSpec spec = </span><span class="java4">new </span><span class="java10">OntModelSpec</span><span class="java8">( </span><span class="java10">OntModelSpec.OWL_MEM </span><span class="java8">)</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; spec.setImportModelMaker</span><span class="java8">( </span><span class="java10">maker </span><span class="java8">)</span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">spec;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
<br />
<br />
&#xA0;&#xA0;&#xA0; </span><span class="java3">// Internal implementation methods<br />
&#xA0;&#xA0;&#xA0; //////////////////////////////////<br />
<br />
&#xA0;&#xA0;&#xA0; //==============================================================================<br />
&#xA0;&#xA0;&#xA0; // Inner class definitions<br />
&#xA0;&#xA0;&#xA0; //==============================================================================<br />
<br />
</span><span class="java8">}<br />
<br />
<br />
</span><span class="java2">/*<br />
&#xA0;&#xA0;&#xA0; (c) Copyright 2002, 2003, 2004, 2005 Hewlett-Packard Development Company, LP<br />
&#xA0;&#xA0;&#xA0; All rights reserved.<br />
<br />
&#xA0;&#xA0;&#xA0; Redistribution and use in source and binary forms, with or without<br />
&#xA0;&#xA0;&#xA0; modification, are permitted provided that the following conditions<br />
&#xA0;&#xA0;&#xA0; are met:<br />
<br />
&#xA0;&#xA0;&#xA0; 1. Redistributions of source code must retain the above copyright<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; notice, this list of conditions and the following disclaimer.<br />
<br />
&#xA0;&#xA0;&#xA0; 2. Redistributions in binary form must reproduce the above copyright<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; notice, this list of conditions and the following disclaimer in the<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; documentation and/or other materials provided with the distribution.<br />
<br />
&#xA0;&#xA0;&#xA0; 3. The name of the author may not be used to endorse or promote products<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; derived from this software without specific prior written permission.<br />
<br />
&#xA0;&#xA0;&#xA0; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR<br />
&#xA0;&#xA0;&#xA0; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES<br />
&#xA0;&#xA0;&#xA0; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.<br />
&#xA0;&#xA0;&#xA0; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,<br />
&#xA0;&#xA0;&#xA0; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT<br />
&#xA0;&#xA0;&#xA0; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,<br />
&#xA0;&#xA0;&#xA0; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY<br />
&#xA0;&#xA0;&#xA0; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT<br />
&#xA0;&#xA0;&#xA0; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF<br />
&#xA0;&#xA0;&#xA0; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<br />
*/<br />
</span></code></div></body>
</html>