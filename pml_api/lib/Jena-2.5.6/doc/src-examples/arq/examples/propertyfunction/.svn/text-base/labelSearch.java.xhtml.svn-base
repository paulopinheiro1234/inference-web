<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<style type="text/css">
td.java, td.java-ln {vertical-align:top;}
tt.java, tt.java-ln, pre.java, pre.java-ln {line-height:1em; margin-bottom:0em;}
td.java-ln { text-align:right; }
tt.java-ln, pre.java-ln { color:#888888 }
/* Background       */ span.java0  { font-size: 10pt; color:#ffffff; }
/* Line numbers       */ span.java1  { font-size: 10pt; color:#808080; }
/* Multi-line comments       */ span.java2  { font-size: 10pt; color:#3f7f5f; }
/* Single-line comments       */ span.java3  { font-size: 10pt; color:#3f7f5f; }
/* Keywords       */ span.java4  { font-size: 10pt; color:#7f0055; font-weight:bold; }
/* Strings       */ span.java5  { font-size: 10pt; color:#2a00ff; }
/* Character constants       */ span.java6  { font-size: 10pt; color:#990000; }
/* Numeric constants       */ span.java7  { font-size: 10pt; color:#990000; }
/* Parenthesis       */ span.java8  { font-size: 10pt; color:#000000; }
/* Primitive Types       */ span.java9  { font-size: 10pt; color:#7f0055; font-weight:bold; }
/* Others       */ span.java10  { font-size: 10pt; color:#000000; }
/* Javadoc keywords       */ span.java11  { font-size: 10pt; color:#7f9fbf; }
/* Javadoc HTML tags       */ span.java12  { font-size: 10pt; color:#7f7f9f; }
/* Javadoc links       */ span.java13  { font-size: 10pt; color:#3f3fbf; }
/* Javadoc others       */ span.java14  { font-size: 10pt; color:#3f5fbf; }
/* Undefined       */ span.java15  { font-size: 10pt; color:#ff6100; }
/* Annotation       */ span.java16  { font-size: 10pt; color:#646464; }
</style>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
<title></title>
</head>
<body>
<div class="java"><code class="java"><span class="java2">/*<br />
 * (c) Copyright 2006, 2007, 2008 Hewlett-Packard Development Company, LP<br />
 * All rights reserved.<br />
 * [See end of file]<br />
 */<br />
<br />
</span><span class="java4">package </span><span class="java10">arq.examples.propertyfunction;<br />
<br />
</span><span class="java4">import </span><span class="java10">java.util.List;<br />
<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.graph.Node;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.graph.Triple;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.rdf.model.Model;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.rdf.model.ModelFactory;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.rdf.model.Resource;<br />
<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.*;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.op.OpBGP;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.op.OpFilter;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.op.OpJoin;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.op.OpTable;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.core.BasicPattern;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.core.Var;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.engine.ExecutionContext;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.engine.QueryIterator;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.engine.iterator.QueryIterNullIterator;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.engine.main.OpCompiler;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.expr.E_Regex;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.expr.Expr;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.expr.ExprVar;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.pfunction.PropFuncArg;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.pfunction.PropertyFunction;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.syntax.ElementFilter;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.syntax.ElementGroup;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.util.ALog;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.util.NodeUtils;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.vocabulary.RDFS;<br />
<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.query.*;<br />
<br />
</span><span class="java14">/** Example extension or property function to show rewriting part of a query.<br />
 *&#xA0; A simpler, more driect way to implement property functions is to extends<br />
 *&#xA0; one of the helper classes and have the custom code called on each solution from the<br />
 *&#xA0; the previosu query stage.<br />
 *&#xA0; <br />
 *&#xA0; See examples </span><span class="java13">{@link localname} </span><span class="java14">for a general predicate that allows for any of<br />
 *&#xA0; subject or object to be a variable of boudn value, or see </span><span class="java13">{@link uppercase} </span><span class="java14">for a simple<br />
 *&#xA0; implementation that transforms on graph node into a new node. <br />
 *&#xA0;&#xA0;&#xA0; <br />
 *&#xA0; This is a more complicated example which&#xA0; uses the PropertyFunction interface directly.<br />
 *&#xA0; It takes the QueryIterator from the previous stage and inserts a new processing step.&#xA0;&#xA0; <br />
 *&#xA0; It then calls that processing step to do the real work.&#xA0; <br />
 *&#xA0; <br />
 *&#xA0; The approach here could be used to access an external index (e.g. Lucene) although here<br />
 *&#xA0; we just show looking for RDFS labels.<br />
 *&#xA0; <br />
 *&#xA0; </span><span class="java12">&lt;pre&gt;<br />
 </span><span class="java14">*&#xA0;&#xA0;&#xA0; ?x ext:labelSearch &#34;something&#34;<br />
 *&#xA0; </span><span class="java12">&lt;/pre&gt;<br />
 </span><span class="java14">*&#xA0; as <br />
 *&#xA0; </span><span class="java12">&lt;pre&gt;<br />
 </span><span class="java14">*&#xA0;&#xA0;&#xA0; ?x rdfs:label ?label . FILTER regex(?label, &#34;something&#34;, &#34;i&#34;)<br />
 *&#xA0; </span><span class="java12">&lt;/pre&gt;<br />
 </span><span class="java14">*&#xA0; <br />
 *&#xA0; by simply doing a regex but could be used to add access to some other form of<br />
 *&#xA0; indexing or external structure.<br />
 *&#xA0; <br />
 * </span><span class="java11">@author </span><span class="java14">Andy Seaborne<br />
 */ <br />
<br />
</span><span class="java4">public class </span><span class="java10">labelSearch </span><span class="java4">implements </span><span class="java10">PropertyFunction<br />
</span><span class="java8">{<br />
&#xA0;&#xA0;&#xA0; </span><span class="java10">List myArgs = </span><span class="java4">null</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">build</span><span class="java8">(</span><span class="java10">PropFuncArg argSubject, Node predicate, PropFuncArg argObject, ExecutionContext execCxt</span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">if </span><span class="java8">( </span><span class="java10">argSubject.isList</span><span class="java8">() </span><span class="java10">|| argObject.isList</span><span class="java8">() )<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">throw new </span><span class="java10">QueryBuildException</span><span class="java8">(</span><span class="java5">&#34;List arguments to &#34;</span><span class="java10">+predicate.getURI</span><span class="java8">()) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0; </span><span class="java2">/* This be called once, with unevaluated arguments.<br />
&#xA0;&#xA0;&#xA0;&#xA0; * To do a rewrite of part of a query, we must use the fundamental PropertyFunction<br />
&#xA0;&#xA0;&#xA0;&#xA0; * interface to be called once with the input iterator.<br />
&#xA0;&#xA0;&#xA0;&#xA0; * Must not return null nor throw an exception.&#xA0; Instead, return a QueryIterNullIterator<br />
&#xA0;&#xA0;&#xA0;&#xA0; * indicating no matches.&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0; */<br />
<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java10">QueryIterator exec</span><span class="java8">(</span><span class="java10">QueryIterator input, PropFuncArg argSubject, Node predicate, PropFuncArg argObject, ExecutionContext execCxt</span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// No real need to check the pattern arguments because<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // the replacement triple pattern and regex will cope<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // but we illustrate testing here.<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Node nodeVar = argSubject.getArg</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; String pattern = NodeUtils.stringLiteral</span><span class="java8">(</span><span class="java10">argObject.getArg</span><span class="java8">()) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">if </span><span class="java8">( </span><span class="java10">pattern == </span><span class="java4">null </span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">ALog.warn</span><span class="java8">(</span><span class="java10">this, </span><span class="java5">&#34;Pattern must be a plain literal or xsd:string: &#34;</span><span class="java10">+argObject.getArg</span><span class="java8">()) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return new </span><span class="java10">QueryIterNullIterator</span><span class="java8">(</span><span class="java10">execCxt</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">if </span><span class="java8">( </span><span class="java4">false </span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Old (ARQ 1) way - not recommended.<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">buildSyntax</span><span class="java8">(</span><span class="java10">input, nodeVar, pattern, execCxt</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Better <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // Build a SPARQL algebra expression<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Var var2 = createNewVar</span><span class="java8">() </span><span class="java10">;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Hidden variable<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">BasicPattern bp = </span><span class="java4">new </span><span class="java10">BasicPattern</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Triple t = </span><span class="java4">new </span><span class="java10">Triple</span><span class="java8">(</span><span class="java10">nodeVar, RDFS.label.asNode</span><span class="java8">()</span><span class="java10">, var2</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; bp.add</span><span class="java8">(</span><span class="java10">t</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; OpBGP op = </span><span class="java4">new </span><span class="java10">OpBGP</span><span class="java8">(</span><span class="java10">bp</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Expr regex = </span><span class="java4">new </span><span class="java10">E_Regex</span><span class="java8">(</span><span class="java4">new </span><span class="java10">ExprVar</span><span class="java8">(</span><span class="java10">var2.getName</span><span class="java8">())</span><span class="java10">, pattern, </span><span class="java5">&#34;i&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Op filter = OpFilter.filter</span><span class="java8">(</span><span class="java10">regex, op</span><span class="java8">) </span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// ---- Evaluation<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">if </span><span class="java8">( </span><span class="java4">true </span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Use the reference query engine<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // Create a table for the input stream (so it uses working memory at this point, <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // which is why this is not the preferred way).&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // Then join to expression for this stage.<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Table table = TableFactory.create</span><span class="java8">(</span><span class="java10">input</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Op op2 = OpJoin.create</span><span class="java8">(</span><span class="java10">OpTable.create</span><span class="java8">(</span><span class="java10">table</span><span class="java8">)</span><span class="java10">, filter</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">Algebra.exec</span><span class="java8">(</span><span class="java10">op2, execCxt.getDataset</span><span class="java8">()) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Use the default, optimizing query engine.<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">OpCompiler.compile</span><span class="java8">(</span><span class="java10">filter, input, execCxt</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
<br />
&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0; </span><span class="java3">// Build SPARQL syntax and compile it.<br />
&#xA0;&#xA0;&#xA0; // Not recommended.<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">private </span><span class="java10">QueryIterator buildSyntax</span><span class="java8">(</span><span class="java10">QueryIterator input, Node nodeVar, String pattern, ExecutionContext execCxt</span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Var var2 = createNewVar</span><span class="java8">() </span><span class="java10">; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Triple patterns for&#xA0;&#xA0; ?x rdfs:label ?hiddenVar<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">ElementTriplesBlock elementBGP = </span><span class="java4">new </span><span class="java10">ElementTriplesBlock</span><span class="java8">()</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Triple t = </span><span class="java4">new </span><span class="java10">Triple</span><span class="java8">(</span><span class="java10">nodeVar, RDFS.label.asNode</span><span class="java8">()</span><span class="java10">, var2</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; elementBGP.addTriple</span><span class="java8">(</span><span class="java10">t</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Regular expression for&#xA0; regex(?hiddenVar, &#34;pattern&#34;, &#34;i&#34;) <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Expr regex = </span><span class="java4">new </span><span class="java10">E_Regex</span><span class="java8">(</span><span class="java4">new </span><span class="java10">ExprVar</span><span class="java8">(</span><span class="java10">var2.getName</span><span class="java8">())</span><span class="java10">, pattern, </span><span class="java5">&#34;i&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ElementGroup elementGroup = </span><span class="java4">new </span><span class="java10">ElementGroup</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; elementGroup.addElement</span><span class="java8">(</span><span class="java10">elementBGP</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; elementGroup.addElement</span><span class="java8">(</span><span class="java4">new </span><span class="java10">ElementFilter</span><span class="java8">(</span><span class="java10">regex</span><span class="java8">)) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Compile it.<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // An alternative design is to build the Op structure programmatically,<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; // <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Op op = Algebra.compile</span><span class="java8">(</span><span class="java10">elementGroup, </span><span class="java4">true</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">OpCompiler.compile</span><span class="java8">(</span><span class="java10">op, input, execCxt</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">static </span><span class="java9">int </span><span class="java10">hiddenVariableCount = </span><span class="java7">0 </span><span class="java10">; <br />
<br />
&#xA0;&#xA0;&#xA0; </span><span class="java3">// Create a new, hidden, variable.<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">private static </span><span class="java10">Var createNewVar</span><span class="java8">()<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">hiddenVariableCount ++ ;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; String varName = </span><span class="java5">&#34;-search-&#34;</span><span class="java10">+hiddenVariableCount ;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">Var.alloc</span><span class="java8">(</span><span class="java10">varName</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0; </span><span class="java3">// -------- Example usage<br />
&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public static </span><span class="java9">void </span><span class="java10">main</span><span class="java8">(</span><span class="java10">String</span><span class="java8">[] </span><span class="java10">argv</span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Call the function as java:arq.examples.ext.labelSearch or register it.<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">String prologue = </span><span class="java5">&#34;PREFIX ext: &lt;java:arq.examples.propertyfunction.&gt;\n&#34; </span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; String qs = prologue+</span><span class="java5">&#34;SELECT * { ?x ext:labelSearch 'EF' }&#34; </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Query query = QueryFactory.create</span><span class="java8">(</span><span class="java10">qs</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Model model = make</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; QueryExecution qExec = QueryExecutionFactory.create</span><span class="java8">(</span><span class="java10">query, model</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">try </span><span class="java8">{<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">ResultSet rs = qExec.execSelect</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ResultSetFormatter.out</span><span class="java8">(</span><span class="java10">rs</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">} </span><span class="java4">finally </span><span class="java8">{ </span><span class="java10">qExec.close</span><span class="java8">() </span><span class="java10">; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Or register it.<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">PropertyFunctionRegistry.get</span><span class="java8">()</span><span class="java10">.put</span><span class="java8">(</span><span class="java5">&#34;http://example/f#search&#34;</span><span class="java10">, labelSearch.</span><span class="java4">class</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; prologue = </span><span class="java5">&#34;PREFIX ext: &lt;http://example/f#&gt;\n&#34; </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; qs = prologue+</span><span class="java5">&#34;SELECT * { ?x ext:search 'EF' }&#34; </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; query = QueryFactory.create</span><span class="java8">(</span><span class="java10">qs</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; qExec = QueryExecutionFactory.create</span><span class="java8">(</span><span class="java10">query, model</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">try </span><span class="java8">{<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">ResultSet rs = qExec.execSelect</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ResultSetFormatter.out</span><span class="java8">(</span><span class="java10">rs</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">} </span><span class="java4">finally </span><span class="java8">{ </span><span class="java10">qExec.close</span><span class="java8">() </span><span class="java10">; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0; }<br />
&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">private static </span><span class="java10">Model make</span><span class="java8">()<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">String BASE = </span><span class="java5">&#34;http://example/&#34; </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Model model = ModelFactory.createDefaultModel</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; model.setNsPrefix</span><span class="java8">(</span><span class="java5">&#34;&#34;</span><span class="java10">, BASE</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Resource r1 = model.createResource</span><span class="java8">(</span><span class="java10">BASE+</span><span class="java5">&#34;r1&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Resource r2 = model.createResource</span><span class="java8">(</span><span class="java10">BASE+</span><span class="java5">&#34;r2&#34;</span><span class="java8">) </span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; r1.addProperty</span><span class="java8">(</span><span class="java10">RDFS.label, </span><span class="java5">&#34;abc&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; r2.addProperty</span><span class="java8">(</span><span class="java10">RDFS.label, </span><span class="java5">&#34;def&#34;</span><span class="java8">) </span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">model&#xA0; ;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
}<br />
<br />
</span><span class="java2">/*<br />
 * (c) Copyright 2006, 2007, 2008 Hewlett-Packard Development Company, LP<br />
 * All rights reserved.<br />
 *<br />
 * Redistribution and use in source and binary forms, with or without<br />
 * modification, are permitted provided that the following conditions<br />
 * are met:<br />
 * 1. Redistributions of source code must retain the above copyright<br />
 *&#xA0;&#xA0;&#xA0; notice, this list of conditions and the following disclaimer.<br />
 * 2. Redistributions in binary form must reproduce the above copyright<br />
 *&#xA0;&#xA0;&#xA0; notice, this list of conditions and the following disclaimer in the<br />
 *&#xA0;&#xA0;&#xA0; documentation and/or other materials provided with the distribution.<br />
 * 3. The name of the author may not be used to endorse or promote products<br />
 *&#xA0;&#xA0;&#xA0; derived from this software without specific prior written permission.<br />
 *<br />
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR<br />
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES<br />
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.<br />
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,<br />
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT<br />
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,<br />
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY<br />
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT<br />
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF<br />
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<br />
 */</span></code></div></body>
</html>