<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<style type="text/css">
td.java, td.java-ln {vertical-align:top;}
tt.java, tt.java-ln, pre.java, pre.java-ln {line-height:1em; margin-bottom:0em;}
td.java-ln { text-align:right; }
tt.java-ln, pre.java-ln { color:#888888 }
/* Background       */ span.java0  { font-size: 10pt; color:#ffffff; }
/* Line numbers       */ span.java1  { font-size: 10pt; color:#808080; }
/* Multi-line comments       */ span.java2  { font-size: 10pt; color:#3f7f5f; }
/* Single-line comments       */ span.java3  { font-size: 10pt; color:#3f7f5f; }
/* Keywords       */ span.java4  { font-size: 10pt; color:#7f0055; font-weight:bold; }
/* Strings       */ span.java5  { font-size: 10pt; color:#2a00ff; }
/* Character constants       */ span.java6  { font-size: 10pt; color:#990000; }
/* Numeric constants       */ span.java7  { font-size: 10pt; color:#990000; }
/* Parenthesis       */ span.java8  { font-size: 10pt; color:#000000; }
/* Primitive Types       */ span.java9  { font-size: 10pt; color:#7f0055; font-weight:bold; }
/* Others       */ span.java10  { font-size: 10pt; color:#000000; }
/* Javadoc keywords       */ span.java11  { font-size: 10pt; color:#7f9fbf; }
/* Javadoc HTML tags       */ span.java12  { font-size: 10pt; color:#7f7f9f; }
/* Javadoc links       */ span.java13  { font-size: 10pt; color:#3f3fbf; }
/* Javadoc others       */ span.java14  { font-size: 10pt; color:#3f5fbf; }
/* Undefined       */ span.java15  { font-size: 10pt; color:#ff6100; }
/* Annotation       */ span.java16  { font-size: 10pt; color:#646464; }
</style>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
<title></title>
</head>
<body>
<div class="java"><code class="java"><span class="java2">/*<br />
 * (c) Copyright 2007, 2008 Hewlett-Packard Development Company, LP<br />
 * All rights reserved.<br />
 * [See end of file]<br />
 */<br />
<br />
</span><span class="java4">package </span><span class="java10">arq.examples;<br />
<br />
</span><span class="java4">import </span><span class="java10">java.util.ArrayList;<br />
</span><span class="java4">import </span><span class="java10">java.util.List;<br />
<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.datatypes.xsd.XSDDatatype;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.graph.Node;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.graph.Triple;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.rdf.model.*;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.Algebra;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.Op;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.op.OpBGP;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.algebra.op.OpFilter;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.core.BasicPattern;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.core.Var;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.engine.QueryIterator;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.engine.ResultSetStream;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.engine.binding.Binding;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.expr.E_LessThan;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.expr.Expr;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.expr.NodeValue;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.expr.ExprVar;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.sparql.util.FmtUtils;<br />
<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.query.ResultSet;<br />
</span><span class="java4">import </span><span class="java10">com.hp.hpl.jena.query.ResultSetFormatter;<br />
<br />
</span><span class="java14">/** Build an algebra expression and execute it */<br />
<br />
</span><span class="java4">public class </span><span class="java10">AlgebraExec<br />
</span><span class="java8">{<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public static </span><span class="java9">void </span><span class="java10">main </span><span class="java8">(</span><span class="java10">String</span><span class="java8">[] </span><span class="java10">argv</span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">String BASE = </span><span class="java5">&#34;http://example/&#34; </span><span class="java10">; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; BasicPattern bp = </span><span class="java4">new </span><span class="java10">BasicPattern</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Var var_x = Var.alloc</span><span class="java8">(</span><span class="java5">&#34;x&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Var var_z = Var.alloc</span><span class="java8">(</span><span class="java5">&#34;z&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// ---- Build expression<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">bp.add</span><span class="java8">(</span><span class="java4">new </span><span class="java10">Triple</span><span class="java8">(</span><span class="java10">var_x, Node.createURI</span><span class="java8">(</span><span class="java10">BASE+</span><span class="java5">&#34;p&#34;</span><span class="java8">)</span><span class="java10">, var_z</span><span class="java8">)) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Op op = </span><span class="java4">new </span><span class="java10">OpBGP</span><span class="java8">(</span><span class="java10">bp</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">//Expr expr = ExprUtils.parse(&#34;?z &lt; 2 &#34;) ;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Expr expr = </span><span class="java4">new </span><span class="java10">E_LessThan</span><span class="java8">(</span><span class="java4">new </span><span class="java10">ExprVar</span><span class="java8">(</span><span class="java10">var_z</span><span class="java8">)</span><span class="java10">, NodeValue.makeNodeInteger</span><span class="java8">(</span><span class="java7">2</span><span class="java8">)) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; op = OpFilter.filter</span><span class="java8">(</span><span class="java10">expr, op</span><span class="java8">) </span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// ---- Example setup<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Model m = makeModel</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; m.write</span><span class="java8">(</span><span class="java10">System.out, </span><span class="java5">&#34;TTL&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; System.out.println</span><span class="java8">(</span><span class="java5">&#34;--------------&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; System.out.print</span><span class="java8">(</span><span class="java10">op</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; System.out.println</span><span class="java8">(</span><span class="java5">&#34;--------------&#34;</span><span class="java8">) </span><span class="java10">;<br />
<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// ---- Execute expression<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">QueryIterator qIter = Algebra.exec</span><span class="java8">(</span><span class="java10">op, m.getGraph</span><span class="java8">()) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// -------- Either read the query iterator directly ...<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">if </span><span class="java8">( </span><span class="java4">false </span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">for </span><span class="java8">( </span><span class="java10">; qIter.hasNext</span><span class="java8">() </span><span class="java10">; </span><span class="java8">)<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Binding b = qIter.nextBinding</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Node n = b.get</span><span class="java8">(</span><span class="java10">var_x</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; System.out.println</span><span class="java8">(</span><span class="java10">FmtUtils.stringForNode</span><span class="java8">(</span><span class="java10">n</span><span class="java8">)) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; System.out.println</span><span class="java8">(</span><span class="java10">b</span><span class="java8">) </span><span class="java10">; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">qIter.close</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">else<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">{<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// -------- Or make ResultSet from it (but not both - reading an<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; //&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; iterator consumes the current solution)<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">List varNames = </span><span class="java4">new </span><span class="java10">ArrayList</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; varNames.add</span><span class="java8">(</span><span class="java5">&#34;x&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; varNames.add</span><span class="java8">(</span><span class="java5">&#34;z&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ResultSet rs = </span><span class="java4">new </span><span class="java10">ResultSetStream</span><span class="java8">(</span><span class="java10">varNames, m, qIter</span><span class="java8">)</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ResultSetFormatter.out</span><span class="java8">(</span><span class="java10">rs</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; qIter.close</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">System.exit</span><span class="java8">(</span><span class="java7">0</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">private static </span><span class="java10">Model makeModel</span><span class="java8">()<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">String BASE = </span><span class="java5">&#34;http://example/&#34; </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Model model = ModelFactory.createDefaultModel</span><span class="java8">() </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; model.setNsPrefix</span><span class="java8">(</span><span class="java5">&#34;&#34;</span><span class="java10">, BASE</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Resource r1 = model.createResource</span><span class="java8">(</span><span class="java10">BASE+</span><span class="java5">&#34;r1&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Resource r2 = model.createResource</span><span class="java8">(</span><span class="java10">BASE+</span><span class="java5">&#34;r2&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Property p1 = model.createProperty</span><span class="java8">(</span><span class="java10">BASE+</span><span class="java5">&#34;p&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Property p2 = model.createProperty</span><span class="java8">(</span><span class="java10">BASE+</span><span class="java5">&#34;p2&#34;</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; RDFNode v1 = model.createTypedLiteral</span><span class="java8">(</span><span class="java5">&#34;1&#34;</span><span class="java10">, XSDDatatype.XSDinteger</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; RDFNode v2 = model.createTypedLiteral</span><span class="java8">(</span><span class="java5">&#34;2&#34;</span><span class="java10">, XSDDatatype.XSDinteger</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; r1.addProperty</span><span class="java8">(</span><span class="java10">p1, v1</span><span class="java8">)</span><span class="java10">.addProperty</span><span class="java8">(</span><span class="java10">p1, v2</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; r1.addProperty</span><span class="java8">(</span><span class="java10">p2, v1</span><span class="java8">)</span><span class="java10">.addProperty</span><span class="java8">(</span><span class="java10">p2, v2</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; r2.addProperty</span><span class="java8">(</span><span class="java10">p1, v1</span><span class="java8">)</span><span class="java10">.addProperty</span><span class="java8">(</span><span class="java10">p1, v2</span><span class="java8">) </span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">model&#xA0; ;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
 <br />
}<br />
<br />
</span><span class="java2">/*<br />
 * (c) Copyright 2007, 2008 Hewlett-Packard Development Company, LP<br />
 * All rights reserved.<br />
 *<br />
 * Redistribution and use in source and binary forms, with or without<br />
 * modification, are permitted provided that the following conditions<br />
 * are met:<br />
 * 1. Redistributions of source code must retain the above copyright<br />
 *&#xA0;&#xA0;&#xA0; notice, this list of conditions and the following disclaimer.<br />
 * 2. Redistributions in binary form must reproduce the above copyright<br />
 *&#xA0;&#xA0;&#xA0; notice, this list of conditions and the following disclaimer in the<br />
 *&#xA0;&#xA0;&#xA0; documentation and/or other materials provided with the distribution.<br />
 * 3. The name of the author may not be used to endorse or promote products<br />
 *&#xA0;&#xA0;&#xA0; derived from this software without specific prior written permission.<br />
 *<br />
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR<br />
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES<br />
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.<br />
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,<br />
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT<br />
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,<br />
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY<br />
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT<br />
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF<br />
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<br />
 */</span></code></div></body>
</html>