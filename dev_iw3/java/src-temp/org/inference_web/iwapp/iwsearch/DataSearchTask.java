/*
 * Created on Jun 16, 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package org.inference_web.iwapp.iwsearch;

import java.util.Iterator;

import org.apache.log4j.Logger;

import sw4j.util.ToolSafe;



import com.hp.hpl.jena.datatypes.xsd.XSDDatatype;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.NodeIterator;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.vocabulary.RDF;
import com.hp.hpl.jena.vocabulary.RDFS;


/**
 * @author Li
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class DataSearchTask {
	public Logger getLogger(){
		return Logger.getLogger(this.getClass());
	}


	// task data
	boolean m_bInited = false;
	
	// in-memory-cache of request
	private String m_szErrorMsg = null;
	public void setError(String szErrorMsg){ this.m_szErrorMsg = szErrorMsg; }
	public boolean hasError(){ return null!=m_szErrorMsg;}
	public String getError(){return m_szErrorMsg;}
	
	private String m_szMsg = "";

	private Resource m_search_service = null;
	public Resource getSearchServiceResource(){ return m_search_service; };
	
	private int m_search_option= IWSearchSettings.OPTION_UNKNOWN;
	public int getQueryOption(){	return m_search_option;	}

	private String m_szSearchString = null;
	public String getSearchString(){ return m_szSearchString; }
	
	private String m_szSearchSortField = AgentIndexerInstance.FIELD_LABEL;
	public String getSearchSortField(){ return m_szSearchSortField; }
	public boolean hasSearchSortField(){ return !ToolSafe.isEmpty(m_szSearchSortField); }
	
	private Resource m_search_result_syntax = ARCHIVE.HTML;
	public Resource getSearchResultSyntax(){ return m_search_result_syntax;}
	
	private String m_search_result_mime_type = "application/rdf+xml";
	public String getSearchResultMimeType(){ return m_search_result_mime_type;}
	
	private String m_search_result_syntax_jena = "RDF/XML-ABBREV";
	public String getSearchResultSyntaxJena(){ return m_search_result_syntax_jena;}

	private int m_nSearchStart=1;
	public int getSearchStart(){ return this.m_nSearchStart;}
	private int m_nSearchLimit=100;
	public int getSearchLimit(){ return this.m_nSearchLimit;}
	
	
	private static int getQueryOptionByQueryType(Resource search_service){
		if (IWSEARCH.search_pml_instance.equals(search_service)){
			return IWSearchSettings.OPTION_INDEX_INSTANCE;
		}
		return IWSearchSettings.OPTION_UNKNOWN;
	}
	
	Resource m_search_results = null;
	public void setSearchResults(Resource results){
		m_search_results = results;
	}
	
	// response 
	public int m_nSearchReturnedResults = 0;
	public int m_nSearchTotalResults = 0;
	public float m_fSearchProcessTimeSeconds=0;

	
	
	public Model getSearchResponseModel(){
		Model m_model_response = ModelFactory.createDefaultModel();

		Resource m_request = m_model_response.createResource(SEARCH.SearchRequest);
//		m_request.addProperty(SEARCH.hasSearchStart, ""+this.m_nSearchStart, XSDDatatype.XSDpositiveInteger);
//		m_request.addProperty(SEARCH.hasSearchLimit, ""+this.m_nSearchLimit, XSDDatatype.XSDnonNegativeInteger);
		m_request.addProperty(SEARCH.usesSearchResultSyntax, m_search_result_syntax);

		if (!ToolSafe.isEmpty(m_search_service))
			m_request.addProperty(SEARCH.usesSearchService, m_search_service);

		if (!ToolSafe.isEmpty(m_szSearchString))
			m_request.addProperty(SEARCH.hasSearchString, m_szSearchString);

		if (!ToolSafe.isEmpty(m_szSearchSortField))
			m_request.addProperty(SEARCH.hasSearchSortField, m_szSearchSortField);
		

		Resource m_response = m_model_response.createResource(SEARCH.SearchResponse);
		m_response.addProperty(SEARCH.hasSearchRequest, m_request);
				
		if (!ToolSafe.isEmpty(m_szMsg))
			m_response.addProperty(RDFS.comment, m_szMsg);

		if (!ToolSafe.isEmpty(m_szErrorMsg)){
			//error message has not been set
			m_response.addProperty(SEARCH.hasSearchErrorMessage, m_szErrorMsg);
			m_response.addProperty(SEARCH.isSearchSucceed, m_model_response.createTypedLiteral(false));
		}else{
			m_response.addProperty(SEARCH.isSearchSucceed, m_model_response.createTypedLiteral(true));
			m_response.addProperty(RDFS.comment, "This result is generated by IWSearch at http://onto.rpi.edu/iwsearch." );

			if (!ToolSafe.isEmpty(m_search_results)){
				m_response.addProperty(SEARCH.hasSearchResults, m_search_results);
				m_model_response.add(m_search_results.getModel());
			}
//			m_response.addProperty(SEARCH.hasSearchReturnedResults, ""+m_nSearchReturnedResults, XSDDatatype.XSDnonNegativeInteger);
			m_response.addProperty(SEARCH.hasSearchTotalResults, ""+m_nSearchTotalResults, XSDDatatype.XSDnonNegativeInteger);
			m_response.addProperty(SEARCH.hasSearchProcessSeconds, ""+m_fSearchProcessTimeSeconds, XSDDatatype.XSDfloat);
		}
		return m_model_response;
	}
	
	
	
	
	public boolean init(String szSearchService, String szSearchString){
		return init(szSearchService, szSearchString,null, null, null);
	}

	public boolean init(String szSearchService, String szSearchString, 
			String szSearchSortField,
			String szSearchStart, String szSearchLimit){
		if (m_bInited){
			getLogger().warn("Task already inited, cannot do it one more time");
			return false;
		}else{
			m_bInited = true;
			return initSearchService(szSearchService)	&& initSearchString(szSearchString)
				&& initSearchSortField(szSearchSortField)
					&& initSearchStart(szSearchStart) && initSearchLimit(szSearchLimit); 
		}
	}
	
	private boolean initSearchService(String szText){
		final Resource [] SEARCH_SERVICES = {
				IWSEARCH.search_pml_instance,
		};

		if (ToolSafe.isEmpty(szText)){
			this.m_szErrorMsg = "search service not specified";
			getLogger().fatal(m_szErrorMsg);
			return false;
		}else{
				
			for (int i=0; i<SEARCH_SERVICES.length; i++){
				if (SEARCH_SERVICES[i].getLocalName().equals(szText)){
					//save search_service
					this.m_search_service =SEARCH_SERVICES[i];
					
					//decide query option
					this.m_search_option = getQueryOptionByQueryType(m_search_service);


					return true;
				}
			}
				
			this.m_szErrorMsg = "search service not supported";
			getLogger().fatal(m_szErrorMsg);
			return false;
		}
	}
	
	private boolean initSearchString(String szText){
		if (ToolSafe.isEmpty(szText)){
			this.m_szErrorMsg = "search string not specified";
			getLogger().fatal(m_szErrorMsg);
			return false;
		}else{
			// record the original query string
			this.m_szSearchString = szText;
			return true;
		}
	}
	
	private boolean initSearchSortField(String szText){
		this.m_szSearchSortField =AgentIndexerInstance.FIELD_LABEL;
		
		if (!ToolSafe.isEmpty(szText)){
			String [] fields = IWSearchSettings.getSortFields(this.getQueryOption());
			for (int i=0; i<fields.length; i++){
				if (fields[i].equalsIgnoreCase(szText)){
					this.m_szSearchSortField = szText;
					return true;
				}
			}
			
			this.m_szMsg += "[Warning] only the following fields are sortable: "+ arrayToString( fields )+ ".";
		}

		return true;
	}	
	
	private String arrayToString(String [] ary){
		String ret = ""; 
		for (int i=0; i<ary.length; i++){
			if (i>0)
				ret +=", ";
			ret += ary[i];
		}
		
		return ret;	
	}
	
	private boolean initSearchStart(String szText){
		if (ToolSafe.isEmpty(szText)){
			szText="1";
		}
		
		// record the original query string
		try{
			this.m_nSearchStart = Integer.parseInt(szText);
			return true;
		}catch(Exception e){
			this.m_szErrorMsg = e.getLocalizedMessage();
			getLogger().fatal(m_szErrorMsg);
			return false;
		}
	}

	private boolean initSearchLimit(String szText){
		if (ToolSafe.isEmpty(szText)){
			szText=""+m_nSearchLimit;
		}
		
		// record the original query string
		try{
			this.m_nSearchLimit= Integer.parseInt(szText);
			return true;
		}catch(Exception e){
			this.m_szErrorMsg = e.getLocalizedMessage();
			getLogger().fatal(m_szErrorMsg);
			return false;
		}
	}
	
	private static final Resource [] SEARCH_RESULT_SYNTAX = {
			ARCHIVE.RDFXML,
			ARCHIVE.HTML,
			ARCHIVE.N3,
			ARCHIVE.NT,
	};

	private static final String [] SEARCH_RESULT_MIME_TYPE = {
		"application/rdf+xml",
		"text/html",
		"text/rdf+n3",
		"text/rdf+nt",
	};
	
	private static final String [] SEARCH_RESULT_SYNTAX_JENA= {
		"RDF/XML-ABBREV",
		"RDF/XML",
		"N3",
		"N-TRIPLE",
	};

	public void initSearchResultSyntax(String szText){

		if (ToolSafe.isEmpty(szText)){
			// by default, return RDFXML
			szText="RDFXML";
		}
				
		for (int i=0; i<SEARCH_RESULT_SYNTAX.length; i++){
			if (SEARCH_RESULT_SYNTAX[i].getLocalName().equalsIgnoreCase(szText)){
				//save search_service
				this.m_search_result_syntax =SEARCH_RESULT_SYNTAX[i];
				this.m_search_result_mime_type =SEARCH_RESULT_MIME_TYPE[i];
				this.m_search_result_syntax_jena = SEARCH_RESULT_SYNTAX_JENA[i];
				

			}
		}
		getLogger().fatal("should not get here");
	}	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


}
/*
	public int user_cat=0;
	public String search_service=null;
	public int query_type_id = -1;
	public int query_index_id = -1;
	public String searchString_origin=null;
	public String searchString_actual=null;
	public int sortOption=1;
	public boolean bHasStart=false;
	public boolean bHasLimit=false;	
	
	public final static int VIEW_RDF=0;
	public final static int VIEW_HTML=1;
	public final static int VIEW_PAGE=2;
	public int viewOption =VIEW_PAGE;
	
	public String requestUrl =null;
	
	public double searchTime;
	public int total=-1;
	public int returned=0;
	
	
	
	public final static int USER_CAT_ADMIN = 3;
	public final static String [] USER_CAT_KEY = new String []{
			"",	// visitor	
			"1cd42e8216v375c585819098da48a1380a",	// users
			"2edaab76dcc9s26e478d3e95a1e0d33200",	// admin
	};
	public final static int USER_CAT_NORMAL = 1;
	public final static int USER_CAT_POWER = 2;
	public final static int USER_CAT_VISITOR = 0;
	public final static int [] USER_LIMIT = new int []{
			100,
			1000,
			Integer.MAX_VALUE,
	};
	public int getUpperLimit(){
		return USER_LIMIT[user_cat];
	}
	
	
	
	public boolean parseSearchString(String searchString){
		this.searchString_origin=searchString;
		
		if (null==this.searchString_actual)
			this.searchString_actual=searchString;
		else
			this.searchString_actual += " "+searchString;
		
		if ((null==searchString_actual)||(searchString_actual.trim().length()==0)){
			return false;
		}
		return true;
	}
	
	public boolean parseQueryType( String search_service){
		if ((search_service==null)||(search_service.trim().length()==0))
			return false;
		
		this.search_service = search_service;
		this.query_type_id = IWSearchSettings.getQueryTypeID(search_service);
		if (this.query_type_id<0)
			return false;
		
		switch (this.query_type_id){
			case IWSearchSettings.QUERY_TYPE_PML_NODESET_TOP:
				this.query_index_id= IWSearchSettings.INDEX_PML_NODESET;
				this.searchString_actual ="top:y ";
				break;
			case IWSearchSettings.QUERY_TYPE_PML_NODESET:
				this.query_index_id= IWSearchSettings.INDEX_PML_NODESET;
				break;
			case IWSearchSettings.QUERY_TYPE_PML_QUERY:
				this.query_index_id= IWSearchSettings.INDEX_PML_INSTANCE_SOURCE;
				this.searchString_actual ="type:Query usage:def ";
				break;
			case IWSearchSettings.QUERY_TYPE_PML_INSTANCE_SOURCE:
				this.query_index_id= IWSearchSettings.INDEX_PML_INSTANCE_SOURCE;
				break;
			case IWSearchSettings.QUERY_TYPE_PML_INSTANCE_RELATION:
				this.query_index_id= IWSearchSettings.INDEX_PML_INSTANCE_RELATION;
				break;
			case IWSearchSettings.QUERY_TYPE_PML_DOC:
				this.query_index_id= IWSearchSettings.INDEX_PML_DOC;
				break;
			default:
				return false;
		}
		return true;
	}
	
	public static String parseSearchInfo(Model m){
		Resource subject = m.listSubjectsWithProperty(RDF.type, SEARCH.SearchResponse).nextResource();
		
		DataSearchTask info = new DataSearchTask();
		
		String temp;
		NodeIterator iter;
		iter =	m.listObjectsOfProperty(subject, SEARCH.hasSearchStart);
		if (iter.hasNext()){
			info.start = Integer.parseInt(InfoRDF.getNodeString( iter.nextNode()));
		}
		iter =	m.listObjectsOfProperty(subject, SEARCH.hasSearchLimit);
		if (iter.hasNext()){
			info.limit = Integer.parseInt(InfoRDF.getNodeString( iter.nextNode()));
		}		
		iter =	m.listObjectsOfProperty(subject, SEARCH.hasSearchTotalResults);
		if (iter.hasNext()){
			info.total = Integer.parseInt(InfoRDF.getNodeString( iter.nextNode()));
		}	
		iter =	m.listObjectsOfProperty(subject, SEARCH.hasSearchString);
		if (iter.hasNext()){
			info.searchString_origin = InfoRDF.getNodeString( iter.nextNode());
		}			
		iter =	m.listObjectsOfProperty(subject, SEARCH.hasSearchTime);
		if (iter.hasNext()){
			info.searchTime = Double.parseDouble(InfoRDF.getNodeString( iter.nextNode()));
		}	
		
		info.returned=0;
		Iterator iter_data= m.listSubjectsWithProperty(RDF.type, IWSEARCH.qt_ElementUsage);
		while(iter_data.hasNext()){
			info.returned ++;
			iter_data.next();
		}
		
		if (info.returned==0)
			info.start=0;
		
		String result = info.start
		+" - "
		+(info.start-1+ info.returned)
		+" of total "
		+(info.total)
		+" results for \""
		+(info.searchString_origin)
		+"\" in "
		+(info.searchTime)
		+" seconds";	
		
		return result;
	}
	
	public String getSearchStringOrigin(){
		if (null==searchString_origin)
			return "";
		else 
			return searchString_origin;
	}

}
*/